
<html> 

<title>HBBatchBeast</title>
<meta http-equiv="x-ua-compatible" content="IE=9" />
<HTA:APPLICATION ID="HBBatchBeast" APPLICATIONNAME="HBBatchBeast" BORDER="DIALOG" BORDERSTYLE="normal" CAPTION="yes" ICON="HBBB.ico" MAXIMIZEBUTTON="yes" MINIMIZEBUTTON="yes" SCROLL="auto" scrollFlat="yes" SHOWINTASKBAR="yes" SINGLEINSTANCE="no" SYSMENU="yes" VERSION="1.51" Navigable="yes" WINDOWSTATE="normal" /> 


<script type="text/javascript"> 

  var fso = new ActiveXObject("Scripting.FileSystemObject"); 


// wait function 
  function sleep(milliseconds) {
    var start = new Date().getTime();
    for (var i = 0; i < 1e7; i++) {
      if ((new Date().getTime() - start) > milliseconds){
        break;
      }
    }
  }



  function ShowFolderFileList(folderspec){

    var s = "";

    var f = fso.GetFolder(folderspec);


    
        // recurse subfolders
        var subfolders = new Enumerator(f.SubFolders);

        for(; !subfolders.atEnd(); subfolders.moveNext()){s+=ShowFolderFileList((subfolders.item()).path);}  

        // display all file path names.

      var thisFile ="";
      var thisLine="";

      var fc = new Enumerator(f.files);
      for (; !fc.atEnd(); fc.moveNext()){


        var thisFile = fc.item() +"";



        

        fileTypeSplit = thisFile.split('.');
        fileType =fileTypeSplit[fileTypeSplit.length - 1]

       // document.getElementById("files2").innerHTML += "<p>"+ fileType+"<\p>";



//Here we define supported file types
       var supportedFileTypeArray = [

       "mp4",
       "mkv",
       "mov",
       "m4v",
       "mpg",
       "mpeg",
       "avi",


       "flv",
       "webm",
       "wmv",
       "vob",
       "evo",
       "mts",
       "m2ts",
       "ts",



       ];


//Here we check to see if the current file being analysed contains a valid file type
       var supportedFileSwitch =0;


       for (var j = 0; j < supportedFileTypeArray.length; j++) {

        if(fileType==supportedFileTypeArray[j]){
          supportedFileSwitch = 1;
        }

      }


//If the file type is valid, then process it

      if(supportedFileSwitch == 1){

//document.getElementById("files2").innerHTML += "<p>"+ thisFile+"<\p>";



//Here add the full file path to the inputPathArray
inputPathArray[inputPathArrayCounter] = thisFile+"";



//Write to file to state that file with valid format has been found
var tFF = fso.OpenTextFile("./Config/totalFilesFound.txt", 2, true);
tFF.WriteLine(totalFileFoundCounter+1);
tFF.Close();
totalFileFoundCounter++



var str = inputPathArray[inputPathArrayCounter];


str = str.substring(str.indexOf("topFolder") + topFolderCharLength+1);


pointer  = str.split('\\');

filePathEnd =pointer[pointer.length - 1]

filePathEndFileType = filePathEnd.slice(0, filePathEnd.lastIndexOf('.'));

subfilePath = filePathEndFileType+document.getElementById("container").options[document.getElementById("container").selectedIndex].text;

LongsubfilePath = str.slice(0, str.lastIndexOf('\\'));

newsubfilePath = LongsubfilePath+"\\"+ subfilePath ;






outputPathArray[inputPathArrayCounter] = outPutPathStem+newsubfilePath;
var outputFolderPath = outputPathArray[inputPathArrayCounter].substring(0, outputPathArray[inputPathArrayCounter].lastIndexOf('\\'));


if(document.getElementById("selectTemporaryConversionFolder").checked==true){

  outputPathArrayFinal[inputPathArrayCounter] = outPutPathStemFinal+newsubfilePath;
  var outputFolderPathFinal = outputPathArrayFinal[inputPathArrayCounter].substring(0, outputPathArrayFinal[inputPathArrayCounter].lastIndexOf('\\'));

}

//document.getElementById("files2").innerHTML += "<p>"+ newsubfilePath+"<\p>";


//if temp folder unchcked


if(document.getElementById("selectTemporaryConversionFolder").checked==true){

  if(fso.FileExists(outputPathArrayFinal[inputPathArrayCounter])){


  }else{

    var uFF = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 2, true);
    uFF.WriteLine(fileNotExistsCounter+1);
    uFF.Close();
    fileNotExistsCounter++
  }




//ELSE if temp folder checked
}else{

  //
  if(fso.FileExists(outputPathArray[inputPathArrayCounter])){


  }else{

    var uFF = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 2, true);
    uFF.WriteLine(fileNotExistsCounter+1);
    uFF.Close();
    fileNotExistsCounter++

  }
//




}








if(fso.FolderExists(outputFolderPath)){


}else{

  if(outputFolderPath!=outputFolderPathold){
    g.WriteLine("mkdir "+"\""+outputFolderPath+"\"");

    outputFolderPathold=outputFolderPath;

  }

}

//AND if tempfolderchecked

if(document.getElementById("selectTemporaryConversionFolder").checked==true){


  if(fso.FolderExists(outputFolderPathFinal)){

  }else{

    if(outputFolderPathFinal!=outputFolderPathFinalold){
      gtwo.WriteLine("mkdir "+"\""+outputFolderPathFinal+"\"");

      outputFolderPathFinalold=outputFolderPathFinal;

    }
  }
}















inputPathArrayCounter++;




if (thisFile.indexOf("csv") >=0){}

}
}


}

  var inputPathArray = [];
  var outputPathArray = [];
  var outputPathArrayFinal = [];


  var inputPathArrayCounter = 0;
  var outputFolderPathold ="";
  var outputFolderPathFinalold ="";

  var fileNotExistsCounter =0;
  var totalFileFoundCounter =0;

var g ;

var outPutPathStem
var outPutPathStemFinal

var inputPathStem 
var inputPathStemSplit 
var topFolder
var topFolderCharLength 
var programPath=""

function convertFiles(){

//validate config inputs
validationSection:
{


if(fso.FolderExists(document.getElementById("sourcePath").value)==false){

   alert("The source folder does not exist!");
   break validationSection;
}


if(document.getElementById("selectTemporaryConversionFolder").checked==true){

  if(fso.FolderExists(document.getElementById("destinationPath").value)==false){

   alert("The temporay conversion folder does not exist!");
   break validationSection;
}



}else{

    if(fso.FolderExists(document.getElementById("destinationPath").value)==false){

   alert("The destination folder does not exist!");
   break validationSection;
}


}

if(document.getElementById("selectTemporaryConversionFolder").checked==true){


      if(fso.FolderExists(document.getElementById("tempDestinationPath").value)==false){

   alert("The destination folder does not exist!");
   break validationSection;
}



}

if(document.getElementById("selectStandardPreset").checked==false && document.getElementById("selectCustomPreset").checked==false){

 alert("Please select a standard preset or input a custom one!");
   break validationSection;
}


var scanIntervalVal = document.getElementById("timer").value

if( scanIntervalVal<5){

 alert("Please select a scan interval of 5 seconds or greater!");
   break validationSection;
}

var instanceNumberVal = document.getElementById("instanceNumber").value
if( instanceNumberVal<1 ||  instanceNumberVal>4){

 alert("Please type the number of simulataneous Handbrake instances to use (1-4)!");
   break validationSection;
}







  saveConfig();

  //Reset counters before processing

  var tempWrite = fso.OpenTextFile("./Config/totalFilesFound.txt", 2, true);
  tempWrite.WriteLine("0");
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 2, true);
  tempWrite.WriteLine("0");
  tempWrite.Close();

  var tempWrite= fso.OpenTextFile("./Config/convertedFiles.txt", 2, true);
  tempWrite.WriteLine("0");
  tempWrite.Close();



  //Launch status window to show how many files have been found (useful for large folders which take a long time to scan)

  var path = "/Config/HBBatchBeastStatus.hta"
  var shell = new ActiveXObject("WScript.Shell");
  var rootdir = shell.currentDirectory;
  RunFileRel(path);

  function RunFileRel(path) {
    WshShell = new ActiveXObject("WScript.Shell");
    WshShell.Run('"' + rootdir + path + '"', 1, false);
  }




//initia counters
  fileNotExistsCounter =0;
  totalFileFoundCounter =0;





  inputPathStem =document.getElementById("sourcePath").value;

  inputPathStemSplit = inputPathStem.split(',');



  topFolder = inputPathStemSplit[inputPathStemSplit.length - 1]

  topFolderCharLength = topFolder.length



  outPutPathStem =document.getElementById("destinationPath").value;
  outPutPathStemFinal =document.getElementById("tempDestinationPath").value;
  


  inputPathArrayCounter = 0

  inputPathArray = [];
  outputPathArray = [];



  var outputpath3 = "./MakeDirBatchTemp.bat";


  if(fso.FileExists(outputpath3)){
    fso.DeleteFile(outputpath3)
  }


  g = fso.OpenTextFile("./MakeDirBatchTemp.bat", 8, true);


  var outputpath3two = "./MakeDirBatchTemp2.bat";

  if(fso.FileExists(outputpath3two)){
    fso.DeleteFile(outputpath3two)
  }


  gtwo = fso.OpenTextFile("./MakeDirBatchTemp2.bat", 8, true);




  


  ShowFolderFileList(inputPathStem);

  g.Close();
  gtwo.Close();


  








  var currentWindowPath = window.location.pathname;

  currentFolderPath = currentWindowPath.substring(0, currentWindowPath.lastIndexOf('\\'));



  var handBrakeCLIPath = fso.GetAbsolutePathName('./HandBrakeCLI.exe');

  var conversionStatusPath = fso.GetAbsolutePathName('./Config/convertedFiles.txt');
  var conversionStatusFilePath = fso.GetAbsolutePathName('./Config/currentFile.txt');

  var conversionStatusPath2 = fso.GetAbsolutePathName('./Config/convertedFiles2.txt');
  var conversionStatusFilePath2 = fso.GetAbsolutePathName('./Config/currentFile2.txt');

  var process1TotalPath = fso.GetAbsolutePathName('./Config/Processes/process1Total.txt');
  var process1Tota2Path = fso.GetAbsolutePathName('./Config/process2Total.txt');




  var tempWrite = fso.OpenTextFile("./Config/convertedFiles.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/currentFile.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();
  
  var tempWrite = fso.OpenTextFile("./Config/convertedFiles2.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/currentFile2.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/Processes/process1Total.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/process2Total.txt", 2, true);
  tempWrite.WriteLine("-");
  tempWrite.Close();  


  var tempWrite = fso.OpenTextFile("./Config/Processes/sourceQueue.txt", 2, true);
  tempWrite.Close(); 

  var tempWrite = fso.OpenTextFile("./Config/Processes/destinationQueue.txt", 2, true);
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/Processes/destinationFinalQueue.txt", 2, true);
  tempWrite.Close();

  var tempWrite = fso.OpenTextFile("./Config/Processes/queueNumberPath.txt", 2, true);
  tempWrite.WriteLine("0");
  tempWrite.Close();


   //reset worker stats

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker1QueueNumber.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker2QueueNumber.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();
   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker3QueueNumber.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker4QueueNumber.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker1FileName.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker2FileName.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker3FileName.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker4FileName.txt", 2, true);
   tempWrite.WriteLine("-");
   tempWrite.Close();

   var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/AllComplete.txt", 2, true);
   tempWrite.WriteLine("0");
   tempWrite.Close();




   var writeNumber = 0;


   if(document.getElementById("selectTemporaryConversionFolder").checked==true){

     for (var i = 0; i < outputPathArray.length; i++) {

      if(fso.FileExists(outputPathArrayFinal[i])){

      }else{

       var tempWrite = fso.OpenTextFile("./Config/Processes/sourceQueue.txt", 8, true);
       tempWrite.WriteLine(inputPathArray[i]);
       tempWrite.Close();   

       var tempWrite = fso.OpenTextFile("./Config/Processes/destinationQueue.txt", 8, true);
       tempWrite.WriteLine(outputPathArray[i]);
       tempWrite.Close();  

       var tempWrite = fso.OpenTextFile("./Config/Processes/destinationFinalQueue.txt", 8, true);
       tempWrite.WriteLine(outputPathArrayFinal[i]);
       tempWrite.Close(); 

       writeNumber++;

     }


   }



 }else{


   for (var i = 0; i < outputPathArray.length; i++) {

    if(fso.FileExists(outputPathArray[i])){

    }else{

     var tempWrite = fso.OpenTextFile("./Config/Processes/sourceQueue.txt", 8, true);
     tempWrite.WriteLine(inputPathArray[i]);
     tempWrite.Close();   

     var tempWrite = fso.OpenTextFile("./Config/Processes/destinationQueue.txt", 8, true);
     tempWrite.WriteLine(outputPathArray[i]);
     tempWrite.Close();  

     var tempWrite = fso.OpenTextFile("./Config/Processes/destinationFinalQueue.txt", 8, true);
     tempWrite.WriteLine(outputPathArrayFinal[i]);
     tempWrite.Close(); 

     writeNumber++;

   }


 }



}










WshShell = new ActiveXObject("WScript.Shell");

try{ 
 WshShell.Run("MakeDirBatchTemp.bat", 1, true); 
} catch (err) {}

WshShell = new ActiveXObject("WScript.Shell");

try{ 
 WshShell.Run("MakeDirBatchTemp2.bat", 1, true); 
} catch (err) {}

try{ 



  var path = "/Config/Processes/Worker";
  var shell = new ActiveXObject("WScript.Shell");
  var rootdir = shell.currentDirectory;
  WshShell = new ActiveXObject("WScript.Shell");

  for (var inNum = 0; inNum < document.getElementById("instanceNumber").value ; inNum++) {




    WshShell.Run('"' + rootdir + path + (inNum+1)+'.hta"', 0, false);
    sleep(1000);

  }

} catch (err) {}




 //  }

runEndSection();



}// end validation label

}

 function runEndSection(){



 if(document.getElementById("scanOnOff").checked==true){


  countDownOn=1;
  document.getElementById("countdown").value = document.getElementById("timer").value

  

}else{

  countDownOn=0;

  document.getElementById("countdown").value = "Disabled";
}



scanCompleted2=1;
scanCompleted=0;
updateInfo =1;


document.getElementById("worker1").innerHTML = "<p>Worker 1 processing queue item number:-<\p>";
document.getElementById("worker1").innerHTML += "<p>File:-<\p>";
document.getElementById("worker2").innerHTML = "<p>Worker 2 processing queue item number:-<\p>";
document.getElementById("worker2").innerHTML += "<p>File:-<\p>";
document.getElementById("worker3").innerHTML = "<p>Worker 3 processing queue item number:-<\p>";
document.getElementById("worker3").innerHTML += "<p>File:-<\p>";
document.getElementById("worker4").innerHTML = "<p>Worker 4 processing queue item number:-<\p>";
document.getElementById("worker4").innerHTML += "<p>File:-<\p>";
var elmnt = document.getElementById("worker4");
elmnt.scrollIntoView()



}



var scanCompleted=0;
var scanCompleted2=0;

window.setInterval("runScan();", 1000);


var updateInfo =0;

var countDownOn=0;

function runScan() {


  if(updateInfo == 1){


   try{
     var tFF2 = fso.OpenTextFile("./Config/totalFilesFound.txt", 1, true);
     
     document.getElementById("totalFilesFound").value = tFF2.ReadLine();
     
     tFF2.Close();


     var uFF2 = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 1, true);
     
     document.getElementById("unconvertedFilesFound").value = uFF2.ReadLine();
     
     uFF2.Close();



     //worker 1

     var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker1QueueNumber.txt", 1, true);
     var QueueNumber1 = tempRead.ReadLine();
     tempRead.Close();

     var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker1FileName.txt", 1, true);
     var FileName1 = tempRead.ReadLine();
     tempRead.Close();

     
     document.getElementById("worker1").innerHTML = "<p>Worker 1 processing queue item number:<font color=\"red\">"+QueueNumber1+"</font><\p>";
     document.getElementById("worker1").innerHTML += "<p>File:"+FileName1+"<\p>";

                      //worker 2
                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker2QueueNumber.txt", 1, true);
                      var QueueNumber2 = tempRead.ReadLine();
                      tempRead.Close();

                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker2FileName.txt", 1, true);
                      var FileName2 = tempRead.ReadLine();
                      tempRead.Close();

                      
                      document.getElementById("worker2").innerHTML = "<p>Worker 2 processing queue item number:<font color=\"red\">"+QueueNumber2+"</font><\p>";
                      document.getElementById("worker2").innerHTML += "<p>File:"+FileName2+"<\p>";

                      //worker 3
                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker3QueueNumber.txt", 1, true);
                      var QueueNumber3 = tempRead.ReadLine();
                      tempRead.Close();

                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker3FileName.txt", 1, true);
                      var FileName3 = tempRead.ReadLine();
                      tempRead.Close();

                      
                      document.getElementById("worker3").innerHTML = "<p>Worker 3 processing queue item number:<font color=\"red\">"+QueueNumber3+"</font><\p>";
                      document.getElementById("worker3").innerHTML += "<p>File:"+FileName3+"<\p>";

                      //worker 4
                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker4QueueNumber.txt", 1, true);
                      var QueueNumber4 = tempRead.ReadLine();
                      tempRead.Close();

                      var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/Worker4FileName.txt", 1, true);
                      var FileName4 = tempRead.ReadLine();
                      tempRead.Close();

                      
                      document.getElementById("worker4").innerHTML = "<p>Worker 4 processing queue item number:<font color=\"red\">"+QueueNumber4+"</font><\p>";
                      document.getElementById("worker4").innerHTML += "<p>File:"+FileName4+"<\p>";

                      

                    }catch(err){}

                    var instanceNumberSetting =document.getElementById("instanceNumber").value;


                    if(instanceNumberSetting==1 && QueueNumber1=="Complete!"){

                      AllComplete();

                    }

                    if(instanceNumberSetting==2 && QueueNumber1=="Complete!"&&QueueNumber2=="Complete!"){

                      AllComplete();

                    }

                    if(instanceNumberSetting==3 && QueueNumber1=="Complete!"&&QueueNumber2=="Complete!"&&QueueNumber3=="Complete!"){

                      AllComplete();

                    }

                    if(instanceNumberSetting==4 && QueueNumber1=="Complete!"&&QueueNumber2=="Complete!"&&QueueNumber3=="Complete!"&&QueueNumber4=="Complete!"){

                      AllComplete();

                    }

                    function AllComplete(){
                      var tempWrite = fso.OpenTextFile("./Config/Processes/WorkerStatus/AllComplete.txt", 2, true);
                      tempWrite.WriteLine("1");
                      tempWrite.Close();


                    }



                  }





                  if(scanCompleted==1 && scanCompleted2==1){



                   if(document.getElementById("deleteSourceFiles").checked==true){
                    for (var i = 0; i < inputPathArray.length; i++) {
                      if(fso.FileExists(inputPathArray[i])){

                        fso.DeleteFile(inputPathArray[i],false)

                      }

                    }
                  }

                  updateInfo =0;

                  var today = new Date();
                  var dd = today.getDate();
                  var mm = today.getMonth() + 1; 
                  var yyyy = today.getFullYear();
                  if (dd < 10) {
                   dd = '0' + dd
                 }
                 if (mm < 10) {
                   mm = '0' + mm
                 }
                 today = dd + '/' + mm + '/' + yyyy;
                 today2 = dd + '-' + mm + '-' + yyyy;

                 var d = new Date(),
                 h = (d.getHours() < 10 ? '0' : '') + d.getHours(),
                 m = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();
                 s = (d.getSeconds() < 10 ? '0' : '') + d.getSeconds();
                 timenow = h + '-' + m + '-' + s;


                 var uFF2 = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 1, true);                 
                 var convertedFiles1= uFF2.ReadLine();
                 uFF2.Close();




                 queueNumberPath = "./Config/Processes/queueNumberPath.txt";
                 var tempRead = fso.OpenTextFile(queueNumberPath, 1, true);
                 convertedFiles = tempRead.ReadLine();
                 tempRead.Close();

                 var tempRead = fso.OpenTextFile("./Config/presetString.txt", 1, true);
                 var preset = tempRead.ReadLine();
                 tempRead.Close();


                 var uFF2 = fso.OpenTextFile("./Config/unconvertedFilesFound.txt", 1, true);

                 var unConvertedFiles = uFF2.ReadLine();

                 uFF2.Close();

                 document.getElementById("files").innerHTML += "<p>Scan completed on "+ today2+"-"+timenow+".-------Total files found:"+totalFileFoundCounter+"---------Unconverted files:"+unConvertedFiles+"------.Files processed:"+convertedFiles+" out of "+convertedFiles1+"-------Preset:"+preset+".<\p>";





                 var tempWrite = fso.OpenTextFile("./Logs/Scans.txt", 8, true);
                 tempWrite.WriteLine("Scan completed on "+ today2+"-"+timenow+".-------Total files found:"+totalFileFoundCounter+"---------Unconverted files:"+unConvertedFiles+"------.Files processed:"+convertedFiles+" out of "+convertedFiles1+"-------Preset:"+preset+".");
                 tempWrite.Close();

                 scanCompleted2=0;


               }

               if(fso.FileExists("./Config/Processes/WorkerStatus/AllComplete.txt")){
                 var tempRead = fso.OpenTextFile("./Config/Processes/WorkerStatus/AllComplete.txt", 1, true);

                 try{
                   var AllComplete = tempRead.ReadLine();
                   tempRead.Close();  

                 }catch(err){
                  var AllComplete ="0";

                }

              }             

              if(countDownOn==1&&AllComplete=="1"){
                scanCompleted=1;

                var timerSeconds =  document.getElementById("countdown").value

                timerSeconds--;

                document.getElementById("countdown").value=timerSeconds ;


                if(timerSeconds==0){

                  convertFiles();

                  document.getElementById("countdown").value=document.getElementById("timer").value


                }
              }





            }



            window.onload = function() {




              try{

                if(fso.FileExists("./Recent/scanInterval.txt")){

                  var tempRead = fso.OpenTextFile("./Recent/scanInterval.txt", 1, true);
                  document.getElementById("timer").value = tempRead.ReadLine();
                  tempRead.Close();
                }

                if(fso.FileExists("./Recent/periodicScanningOnOff.txt")){

                  var tempRead = fso.OpenTextFile("./Recent/periodicScanningOnOff.txt", 1, true);
                  var scanningOnOff = tempRead.ReadLine();
                  tempRead.Close();

                  if(scanningOnOff=="1"){
                    document.getElementById("scanOnOff").checked=true;
                  }else{
                    document.getElementById("scanOnOff").checked=false;

                  }
                }

                if(fso.FileExists("./Config/viewCMDOnOff.txt")){
                  var tempRead = fso.OpenTextFile("./Config/viewCMDOnOff.txt", 1, true);
                  var viewCMDOnOff = tempRead.ReadLine();
                  tempRead.Close();

                  if(viewCMDOnOff=="1"){
                    document.getElementById("viewCMDOnOff").checked=true;
                  }else{
                    document.getElementById("viewCMDOnOff").checked=false;

                  }     
                }                

                if(fso.FileExists("./Recent/recentDestination.txt")){
                  var tempRead = fso.OpenTextFile("./Recent/recentDestination.txt", 1, true);
                  document.getElementById("destinationPath").value = tempRead.ReadLine();
                  tempRead.Close();
                }

                if(fso.FileExists("./Recent/recentSource.txt")){
                  var tempRead = fso.OpenTextFile("./Recent/recentSource.txt", 1, true);
                  document.getElementById("sourcePath").value = tempRead.ReadLine();
                  tempRead.Close();
                }


                if(fso.FileExists("./Recent/tempDestinationPath.txt")){
                 var tempRead = fso.OpenTextFile("./Recent/tempDestinationPath.txt", 1, true);
                 document.getElementById("tempDestinationPath").value = tempRead.ReadLine();
                 tempRead.Close();
               }


               if(fso.FileExists("./Recent/tempDestinationOnOff.txt")){
                var tempRead = fso.OpenTextFile("./Recent/tempDestinationOnOff.txt", 1, true);
                var temp = tempRead.ReadLine();
                tempRead.Close();

                if(temp=="1"){
                  document.getElementById("selectTemporaryConversionFolder").checked=true;
                  document.getElementById("tempConversionFolderDiv").style.display = 'block';

                }else{
                  document.getElementById("selectTemporaryConversionFolder").checked=false;

                } 
              }



              if(fso.FileExists("./Config/preset.txt")){
                var tempRead = fso.OpenTextFile("./Config/preset.txt", 1, true);
                var selectedIndex = tempRead.ReadLine();

                document.getElementById("preset").selectedIndex = selectedIndex;
                tempRead.Close();
              }


              if(fso.FileExists("./Config/customPreset.txt")){
                var tempRead = fso.OpenTextFile("./Config/customPreset.txt", 1, true);
                document.getElementById("customPresets").selectedIndex = tempRead.ReadLine();
                tempRead.Close();
              }

              if(fso.FileExists("./Config/customPresetOnOff.txt")){

                var tempRead = fso.OpenTextFile("./Config/customPresetOnOff.txt", 1, true);
                var temp = tempRead.ReadLine();

                if(temp=="0"){
                  document.getElementById("selectStandardPreset").checked=true
                  document.getElementById("standardPresetDiv").style.display = 'block';

                }
                else{
                  document.getElementById("selectCustomPreset").checked=true  
                  document.getElementById("customPresetDiv").style.display = 'block';  

                }
                tempRead.Close();
              }


              if(fso.FileExists("./Config/container.txt")){
                var tempRead = fso.OpenTextFile("./Config/container.txt", 1, true);
                var selectedIndex = tempRead.ReadLine();

                document.getElementById("container").selectedIndex = selectedIndex;
                tempRead.Close();
              }

              if(fso.FileExists("./config/customPreset.txt")){

                var tempRead = fso.OpenTextFile("./config/customPreset.txt", 1, true);
                document.getElementById("customPresets").value = tempRead.ReadLine();
                tempRead.Close();
              }

              if(fso.FileExists("./config/instanceNumber.txt")){

               var tempRead = fso.OpenTextFile("./config/instanceNumber.txt", 1, true);
               document.getElementById("instanceNumber").value = tempRead.ReadLine();
               tempRead.Close();
             }

           }catch(err){}



           cbChange2();

         }


         function saveConfig(){


          var tempWrite = fso.OpenTextFile("./Recent/scanInterval.txt", 2, true);
          tempWrite.WriteLine(document.getElementById("timer").value);
          tempWrite.Close();


          var tempWrite = fso.OpenTextFile("./Recent/periodicScanningOnOff.txt", 2, true);
          if(document.getElementById("scanOnOff").checked==true){
            tempWrite.WriteLine("1")
          }else{
            tempWrite.WriteLine("0")
          }
          tempWrite.Close();


          var tempWrite = fso.OpenTextFile("./Config/viewCMDOnOff.txt", 2, true);
          if(document.getElementById("viewCMDOnOff").checked==true){
            tempWrite.WriteLine("1")
          }else{
            tempWrite.WriteLine("0")
          }
          tempWrite.Close();


          var tempWrite = fso.OpenTextFile("./Recent/recentSource.txt", 2, true);
          tempWrite.WriteLine(document.getElementById("sourcePath").value);
          tempWrite.Close();

          var tempWrite = fso.OpenTextFile("./Recent/recentDestination.txt", 2, true);
          tempWrite.WriteLine(document.getElementById("destinationPath").value);
          tempWrite.Close();

          var tempWrite = fso.OpenTextFile("./Recent/tempDestinationPath.txt", 2, true);
          tempWrite.WriteLine(document.getElementById("tempDestinationPath").value);
          tempWrite.Close();


          var tempWrite = fso.OpenTextFile("./Recent/tempDestinationOnOff.txt", 2, true);
          if(document.getElementById("selectTemporaryConversionFolder").checked==true){
            tempWrite.WriteLine("1");
          }else{
           tempWrite.WriteLine("0");
         }
         tempWrite.Close();

         var tempWrite = fso.OpenTextFile("./Config/preset.txt", 2, true);
         tempWrite.WriteLine(document.getElementById("preset").value);
         tempWrite.Close();

         var tempWrite = fso.OpenTextFile("./Config/customPresetOnOff.txt", 2, true);
         if(document.getElementById("selectStandardPreset").checked==true){
          tempWrite.WriteLine("0");
        }else{
          tempWrite.WriteLine("1");
        }
        tempWrite.Close();

        var tempWrite = fso.OpenTextFile("./Config/customPreset.txt", 2, true);
        tempWrite.WriteLine(document.getElementById("customPresets").value);
        tempWrite.Close();




        var tempWrite = fso.OpenTextFile("./Config/container.txt", 2, true);
        tempWrite.WriteLine(document.getElementById("container").value);
        tempWrite.Close();

        if(document.getElementById("selectStandardPreset").checked==true){
          var tempWrite = fso.OpenTextFile("./Config/presetString.txt", 2, true);
          tempWrite.WriteLine("-Z \""+document.getElementById("preset").options[document.getElementById("preset").selectedIndex].text+"\"");
          tempWrite.Close();
        }


        if(document.getElementById("selectCustomPreset").checked==true){
          var tempWrite = fso.OpenTextFile("./Config/presetString.txt", 2, true);
          tempWrite.WriteLine(document.getElementById("customPresets").value);
          tempWrite.Close();
        }




        var tempWrite = fso.OpenTextFile("./Config/instanceNumber.txt", 2, true);
        tempWrite.WriteLine(document.getElementById("instanceNumber").value);
        tempWrite.Close();

      }


      function openURL()
      {
        var shell = new ActiveXObject("WScript.Shell");
        shell.run("https://github.com/HaveAGitGat");
      }

      function cbChange1(obj) {
       if (obj.checked == false) {
         obj.checked = false;
       } else if (obj.checked == true) {
         var cbs = document.getElementsByClassName("cb1");
         for (var i = 0; i < cbs.length; i++) {
           cbs[i].checked = false;
         }
         obj.checked = true;
       }

       document.getElementById("standardPresetDiv").style.display = 'none';
       document.getElementById("customPresetDiv").style.display = 'none';

       if(document.getElementById("selectStandardPreset").checked==true){
        document.getElementById("standardPresetDiv").style.display = 'block';
      }

      if(document.getElementById("selectCustomPreset").checked==true){

        document.getElementById("customPresetDiv").style.display = 'block';
      }


    }

    function cbChange2() {

     if(document.getElementById("selectTemporaryConversionFolder").checked==true){

      document.getElementById("tempConversionFolderDiv").style.display = 'block';
      document.getElementById("ShowHide1").style.display = 'none';
      document.getElementById("ShowHide2").style.display = 'block';



    }else{
      document.getElementById("tempConversionFolderDiv").style.display = 'none';
      document.getElementById("ShowHide1").style.display = 'block';
      document.getElementById("ShowHide2").style.display = 'none';
    }
  }

  function showAlert(message){

    if(document.getElementById("deleteSourceFiles").checked==true){
      alert(message);
    }

  }


 /* window.onbeforeunload = function(){
   if(confirm("Are you sure you want to close/refresh the page?")){


   }else{

   }
}*/

window.onbeforeunload = function() {
            return "Any conversion queues in progress will continue until completed (Please end these in task manager if need be).";
        }

function viewLog(logPath) {
  var path = logPath
  var shell = new ActiveXObject("WScript.Shell");
  var rootdir = shell.currentDirectory;
  RunFileRel(path);

  function RunFileRel(path) {
    WshShell = new ActiveXObject("WScript.Shell");
    WshShell.Run('"' + rootdir + path + '"', 1, false);
  }
}

</script>

<style>

body {
  background-color: #989898;
  display: inline;
}



.main {

  height: 20em;

  width: 70em;

}

.folderPaths {

  height: 2em;

  width: 100em;

}

.customPresetBox {

  height: 10em;

  width: 100em;

}

.dropdown1 {



}


.button1 {
  background-color: #4CAF50; /* Green */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
}


.button2{
  background-color: #f44336; /* Green */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
}

p {

  text-align: center;
  text-decoration: none;

  font-size: 16px;
  font-family:verdana;
}

.selectbox{

  width: 30em;

}

</style>
</head>

<body> 

 <center> 


  <center><h1 style="font-family:verdana;">HBBatchBeast</h1></center>

  <input type="button" onclick="openURL()" value="by HaveAGitGat">


<p>Want to monitor 2 or more folders at once? Create copies of the HBBatchBeast folder (each folder works indepedently) and then run the respective HBBatchBeast.hta files from those folders. Running two instances of HBBatchBeast.hta from the SAME folder will cause all sorts of errors.</p>


  <p>Source folder path:(e.g "\\Server\share\Videos" or "C:\Videos" (without quotes and no last slash))</p><textarea type="text"  class="folderPaths"   id="sourcePath"></textarea>


  <p>Temporary conversion folder?:<input type="checkbox" id="selectTemporaryConversionFolder"  onchange="cbChange2()"></p>


  <div id="ShowHide1"><p>Destination folder path:</p></div>
  <div id="ShowHide2"><p>Temporary conversion folder path:</p></div>

  <textarea type="text" class="folderPaths"  id="destinationPath"></textarea>


  <div style="display: none;" id="tempConversionFolderDiv">
    <p>Destination folder path:</p><textarea type="text" class="folderPaths"  id="tempDestinationPath"></textarea>
  </div>



  <p>Standard preset:<input type="checkbox" id="selectStandardPreset" class="cb1"  onchange="cbChange1(this)"></p>
  <p>Custom preset:<input type="checkbox" id="selectCustomPreset" class="cb1"  onchange="cbChange1(this)"></p>


  <div style="display: none;" id="standardPresetDiv">

    <p>Select standard preset:</p>
    <select name="preset" class="selectbox" id="preset">
      <option value="0"></option>
      <option value="1">Very Fast 1080p30</option>
      <option value="2">Very Fast 720p30</option>
      <option value="3">Very Fast 576p25</option>
      <option value="4">Very Fast 480p30</option>
      <option value="5">Fast 1080p30</option>
      <option value="6">Fast 720p30</option>
      <option value="7">Fast 576p25</option>
      <option value="8">Fast 480p30</option>
      <option value="9">HQ 1080p30 Surround</option>
      <option value="10">HQ 720p30 Surround</option>
      <option value="11">HQ 576p25 Surround</option>
      <option value="12">HQ 480p30 Surround</option>
      <option value="13">Super HQ 1080p30 Surround</option>
      <option value="14">Super HQ 720p30 Surround</option>
      <option value="15">Super HQ 576p25 Surround</option>
      <option value="16">Super HQ 480p30 Surround</option>
      <option value="17">Gmail Large 3 Minutes 720p30</option>
      <option value="18">Gmail Medium 5 Minutes 480p30</option>
      <option value="19">Gmail Small 10 Minutes 288p30</option>
      <option value="20">Vimeo YouTube HQ 2160p60 4K</option>
      <option value="21">Vimeo YouTube HQ 1440p60 2.5K</option>
      <option value="22">Vimeo YouTube HQ 1080p60</option>
      <option value="23">Vimeo YouTube HQ 720p60</option>
      <option value="24">Vimeo YouTube 720p30</option>
      <option value="25">Android 1080p30</option>
      <option value="26">Android 720p30</option>
      <option value="27">Android 576p25</option>
      <option value="28">Android 480p30</option>
      <option value="29">Apple 2160p60 4K HEVC Surround</option>
      <option value="30">Apple 1080p60 Surround</option>
      <option value="31">Apple 1080p30 Surround</option>
      <option value="32">Apple 720p30 Surround</option>
      <option value="33">Apple 540p30 Surround</option>
      <option value="34">Apple 240p30</option>
      <option value="35">Chromecast 2160p60 4K HEVC Surround</option>
      <option value="36">Chromecast 1080p60 Surround</option>
      <option value="37">Chromecast 1080p30 Surround</option>
      <option value="38">Amazon Fire 2160p60 4K HEVC Surround</option>
      <option value="39">Amazon Fire 1080p30 Surround</option>
      <option value="40">Amazon Fire 720p30</option>
      <option value="41">Playstation 1080p30 Surround</option>
      <option value="42">Playstation 720p30</option>
      <option value="43">Playstation 540p30</option>
      <option value="44">Roku 2160p60 4K HEVC Surround</option>
      <option value="45">Roku 1080p30 Surround</option>
      <option value="46">Roku 720p30 Surround</option>
      <option value="47">Roku 576p25</option>
      <option value="48">Roku 480p30</option>
      <option value="49">Windows Mobile 1080p30</option>
      <option value="50">Windows Mobile 720p30</option>
      <option value="51">Windows Mobile 540p30</option>
      <option value="52">Windows Mobile 480p30</option>
      <option value="53">Xbox 1080p30 Surround</option>
      <option value="54">Xbox Legacy 1080p30 Surround</option>
      <option value="55">H.265 MKV 2160p60</option>
      <option value="56">H.265 MKV 1080p30</option>
      <option value="57">H.265 MKV 720p30</option>
      <option value="58">H.265 MKV 576p25</option>
      <option value="59">H.265 MKV 480p30</option>
      <option value="60">H.264 MKV 2160p60</option>
      <option value="61">H.264 MKV 1080p30</option>
      <option value="62">H.264 MKV 720p30</option>
      <option value="63">H.264 MKV 576p25</option>
      <option value="64">H.264 MKV 480p30</option>
      <option value="65">VP9 MKV 2160p60</option>
      <option value="66">VP9 MKV 1080p30</option>
      <option value="67">VP9 MKV 720p30</option>
      <option value="68">VP9 MKV 576p25</option>
      <option value="69">VP9 MKV 480p30</option>
      <option value="70">VP8 MKV 1080p30</option>
      <option value="71">VP8 MKV 720p30</option>
      <option value="72">VP8 MKV 576p25</option>
      <option value="73">VP8 MKV 480p30</option>
      <option value="74">Production Max</option>
      <option value="75">Production Standard</option>
      <option value="76">Production Proxy 1080p</option>
      <option value="77">Production Proxy 540p</option>


    </select>
  </div>

  <div style="display: none;" id="customPresetDiv">
    <p>Write custom presets or link to a json preset exported from Handbrake. For example:</p>

    <p>-e x264 -q 20 -B 160</p>

    <p>or</p>
    <p>--preset-import-file "C:\Users\HaveAGitGat\Desktop\testpreset.json" -Z "My Preset"</p>
    <textarea type="text" class="customPresetBox"  id="customPresets"></textarea>

  </div>

  <p>Container:</p>
  <select name="container" class="selectbox" id="container">
    <option value="0">.mp4</option> 
    <option value="1">.m4v</option>
    <option value="2">.mkv</option>

  </select>

  <br>

  <p>Enable periodic scanning?:<input type="checkbox" id="scanOnOff" ></p>
  <p>Scan interval (minimum 5):<input type="text"  id="timer">seconds</p>


  <p>Show Handbrake CMD windows when conversion is running?:<input type="checkbox" id="viewCMDOnOff" ></p>

  <p  style="color:red;">Delete source files after conversion?:<input type="checkbox" id="deleteSourceFiles" onchange="showAlert('SOURCE FILES WILL BE DELETED AFTER CONVERSION! Please test before proper use!')" ></p>

  <p>Number of simulataneous Handbrake instances to use?(1-4):<input type="text"  id="instanceNumber"></p>

  <input type='button' class="button1" value='Save config'  onclick='saveConfig()'/>

  <br>
  <br>
  <br>
  <input type='button' class="button2" value='Scan for and convert files'  onclick='convertFiles()'/>

  <div id="conversionInfo"></div>
  <p>Scanning for new files in:<input type="text"  id="countdown">seconds</p>


  <p>---------------------------------------------------------------------------------------</p>

  <input type="button" onclick="runEndSection()" value="Press this button to re-show queue status if you closed HBBB while queue running">

  <input type="button" onclick="viewLog('/Logs/Scans.txt')" value="View scan log">
  <input type="button" onclick="viewLog('/Logs/fileConversionLog.txt')" value="File conversion log">



  <p>Total number of media files found:<input type="text"  id="totalFilesFound" ></p>
  <p>Number of unconverted media files found(files which don't exist in destination folders):<input type="text"  id="unconvertedFilesFound" ></p>

  <div id="worker1"/>  </div>
  <div id="worker2"/>  </div>
  <div id="worker3"/>  </div>
  <div id="worker4"/>  </div>


  <div id="files"></div>
  <div id="files2"></div>



</center>






</html>
